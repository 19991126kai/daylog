<section class="py-12 px-4 max-w-5xl mx-auto">
  <div class="w-full bg-white p-10 rounded shadow-md">
    <h2 class="text-3xl font-bold text-blue-900 mb-8 border-b pb-2">タイマー</h2>
    <%= form_with model: @log, url: logs_path, method: :post, local: true, class: "w-full max-w-md mb-8 mx-auto", id: "timer-form" do |f| %>
      <div class="mb-6">
        <%= f.label :category_id, "カテゴリ", class: "block text-gray-700 text-sm font-semibold mb-2" %>
        <%= f.collection_select :category_id, @categories, :id, :name,
              { include_blank: "未分類" },
              class: "w-full px-4 py-2 border border-gray-300 rounded",
              id: "log-category" %>
      </div>
    <% end %>
    <div class="flex w-1/2 mx-auto mb-6 border-b border-gray-200 select-none">
      <div id="work-tab" class="active w-1/2 text-center py-2 font-semibold text-blue-900 border-b-2 border-blue-900 cursor-pointer">
        学習
      </div>
      <div id="break-tab" class="w-1/2 text-center py-2 font-semibold text-gray-500 hover:text-blue-800 cursor-pointer">
        休憩
      </div>
    </div>
    <div id="timer" class="flex flex-col items-center gap-8">
      <%# タイマー秒数表示 %>
      <div class="font-bold tabular-nums tracking-wider text-9xl my-10">
        <span id="timer-display">25:00</span>
      </div>
      <%# タイマー操作ボタン %>
      <div class="flex items-center gap-4 mb-5">
        <button id="btn-start"
                class="bg-blue-900 text-white font-semibold py-3 px-8 rounded hover:bg-blue-800 hover:cursor-pointer transition">
          開始
        </button>
        <button id="btn-pause"
                class="bg-gray-200 text-gray-800 font-semibold py-3 px-8 rounded hover:bg-gray-300 hover:cursor-pointer transition">
          一時停止
        </button>
        <button id="btn-finish"
                class="bg-emerald-600 text-white font-semibold py-3 px-8 rounded hover:bg-emerald-700 hover:cursor-pointer transition">
          終了
        </button>
      </div>
    </div>
  </div>
</section>
<script>
  const workTab = document.getElementById("work-tab");
  const breakTab = document.getElementById("break-tab");
  const timerDisplay = document.getElementById("timer-display");
  const startBtn      = document.getElementById("btn-start");

  const activeClassArr   = ["active", "text-blue-900", "border-b-2", "border-blue-900"];
  const inactiveClassArr = ["text-gray-500", "hover:text-blue-800"];

  let intervalId = null;
  let leftTime = 25 * 60; // LSB: 1sec

  // 学習／休憩タブの切り替え処理
  const setActiveTab = (activeEl, inactiveEl) => {
    activeEl.classList.remove(...inactiveClassArr);
    activeEl.classList.add(...activeClassArr);

    inactiveEl.classList.remove(...activeClassArr);
    inactiveEl.classList.add(...inactiveClassArr);
  };

  workTab.addEventListener("click", () => {
    if (!workTab.classList.contains("active")) {
      setActiveTab(workTab, breakTab);
      timerDisplay.innerText = "25:00";
      leftTime = 25 * 60;
    }
  });

  breakTab.addEventListener("click", () => {
    if (!breakTab.classList.contains("active")) {
      setActiveTab(breakTab, workTab);
      timerDisplay.innerText = "05:00";
      leftTime = 5 * 60;
    }
  });

  const zeroPadding = (n) => {
    return String(n).padStart(2, "0")
  };

  const format = (sec) => {
    return `${zeroPadding(Math.floor(sec / 60))}:${zeroPadding(sec % 60)}`
  };

  const updateDisplay = () => {
    timerDisplay.textContent = format(leftTime);
    if (workTab.classList.contains("active")) {
      document.title = `Daylog ｜ [学習中] ${format(leftTime)}`;
    }
    else {
      document.title = `Daylog ｜ [休憩中] ${format(leftTime)}`;
    }
  };

  startBtn.addEventListener("click", () => {
    intervalId = setInterval(() => {
      if (leftTime > 0) {
        leftTime -= 1;
        updateDisplay();
      }
      else {
        clearInterval(intervalId);
        alert("終了");
        updateDisplay();
      }
    }, 1000);
    updateDisplay();
  });
</script>

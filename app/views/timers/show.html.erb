<section class="py-12 px-4 max-w-5xl mx-auto">
  <div class="w-full bg-white p-10 rounded shadow-md">
    <h2 class="text-3xl font-bold text-blue-900 mb-8 border-b pb-2">タイマー</h2>
    <%= form_with model: @log, url: logs_path, method: :post, local: true, class: "w-full max-w-md mb-8 mx-auto", id: "timer-form" do |f| %>
      <div class="mb-6">
        <%= f.label :category_id, "カテゴリ", class: "block text-gray-700 text-sm font-semibold mb-2" %>
        <%= f.collection_select :category_id, @categories, :id, :name,
              { include_blank: "未分類" },
              class: "w-full px-4 py-2 border border-gray-300 rounded" %>
      </div>
    <% end %>
    <div class="flex w-1/2 mx-auto mb-6 border-b border-gray-200 select-none">
      <div id="work-tab" class="active w-1/2 text-center py-2 font-semibold text-blue-900 border-b-2 border-blue-900 cursor-pointer">
        学習
      </div>
      <div id="break-tab" class="w-1/2 text-center py-2 font-semibold text-gray-500 hover:text-blue-800 cursor-pointer">
        休憩
      </div>
    </div>
    <div id="timer" class="flex flex-col items-center gap-8">
      <%# タイマー秒数表示 %>
      <div class="font-bold tabular-nums tracking-wider text-9xl my-10">
        <span id="timer-display">25:00</span>
      </div>
      <%# タイマー操作ボタン %>
      <div class="flex items-center gap-4 mb-5">
        <button id="btn-start"
                class="bg-blue-900 text-white font-semibold py-3 px-8 rounded hover:bg-blue-800 hover:cursor-pointer transition">
          開始
        </button>
        <button id="btn-pause"
                class="hidden bg-gray-200 text-gray-800 font-semibold py-3 px-8 rounded hover:bg-gray-300 hover:cursor-pointer transition">
          一時停止
        </button>
        <button id="btn-finish"
                class="hidden bg-emerald-600 text-white font-semibold py-3 px-8 rounded hover:bg-emerald-700 hover:cursor-pointer transition">
          終了
        </button>
      </div>
    </div>
  </div>
</section>
<script>
  document.addEventListener("turbo:load", () => {
    const workTab = document.getElementById("work-tab");
    const breakTab = document.getElementById("break-tab");
    const timerDisplay = document.getElementById("timer-display");

    const activeClassArr   = ["active", "text-blue-900", "border-b-2", "border-blue-900"];
    const inactiveClassArr = ["text-gray-500", "hover:text-blue-800"];

    // モード定義
    const Mode = { WORK: "work", BREAK: "break" };
    const DURATION_BY_MODE = { [Mode.WORK]: 25 * 60, [Mode.BREAK]: 5 * 60 };  // LSB: 1秒

    let intervalId = null;
    let leftTime; // LSB: 1sec
    let isPaused = false;

    // タイマーページ以外では何もしない
    if (!workTab) {
      return;
    }

    // タイマー動作中かチェック関数
    const isRunning = () => {
      return intervalId !== null;
    };

    // 学習／休憩タブの切り替え
    const setActiveTab = (activeEl, inactiveEl) => {
      activeEl.classList.remove(...inactiveClassArr);
      activeEl.classList.add(...activeClassArr);

      inactiveEl.classList.remove(...activeClassArr);
      inactiveEl.classList.add(...inactiveClassArr);
    };

    // 1桁目を0埋めする関数
    const zeroPadding = (n) => {
      return String(n).padStart(2, "0")
    };

    // hh:mm の形式にフォーマットする関数
    const format = (sec) => {
      return `${zeroPadding(Math.floor(sec / 60))}:${zeroPadding(sec % 60)}`
    };

    // タイマー・ブラウザタブの残り秒数更新
    const updateDisplay = () => {
      timerDisplay.textContent = format(leftTime);
      document.title = `${format(leftTime)}`;
    };

    // タブを有効化する共通関数
    const activateMode = (newMode) => {

      // タイマー動作中はタブ切り替え不可
      if (isRunning()) {
        return;
      }

      const isWork = (newMode === Mode.WORK);
      setActiveTab((isWork ? workTab : breakTab), (isWork ? breakTab : workTab)); // 三項演算子で引数を切り替えてる

      leftTime = DURATION_BY_MODE[newMode];
      updateDisplay();
    };

    // 学習タブクリック
    workTab.addEventListener("click", () => {
      if (!workTab.classList.contains("active")) {
        activateMode(Mode.WORK);
      };
    });

    // 休憩タブクリック
    breakTab.addEventListener("click", () => {
      if (!breakTab.classList.contains("active")) {
        activateMode(Mode.BREAK);
      }
    });

    const startBtn = document.getElementById("btn-start");
    const pauseBtn = document.getElementById("btn-pause");
    const finishBtn = document.getElementById("btn-finish");
    const categorySelect = document.getElementById("log_category_id");

    // 開始
    startBtn.addEventListener("click", () => {
      startBtn.classList.add("hidden")
      pauseBtn.classList.remove("hidden");
      finishBtn.classList.remove("hidden");

      categorySelect.disabled = true;

      intervalId = setInterval(() => {
        if (isPaused == false) {
          if (leftTime > 0) {
            leftTime -= 1;
            updateDisplay();
          }
          else {
            clearInterval(intervalId);
            intervalId = null;
            alert("終了");
            updateDisplay();
          }
        }
      }, 1000);
      updateDisplay();
    });

    // 一時停止
    pauseBtn.addEventListener("click", () => {
      if (isPaused == false) {
        isPaused = true;
        pauseBtn.innerText = "再開"
        timerDisplay.classList.add("text-gray-600")
      }
      else {
        isPaused = false;
        pauseBtn.innerText = "一時停止"
        timerDisplay.classList.remove("text-gray-600")
      }
    });

    // 終了
    finishBtn.addEventListener("click", () => {
      startBtn.classList.remove("hidden");
      pauseBtn.classList.add("hidden");
      finishBtn.classList.add("hidden");

      categorySelect.disabled = false;

      isPaused = false;
      pauseBtn.innerText = "一時停止"
      timerDisplay.classList.remove("text-gray-600")

      clearInterval(intervalId);
      intervalId = null;
      if (workTab.classList.contains("active")) {
        leftTime = 25 * 60;
      }
      else {
        leftTime = 5 * 60;
      }
      updateDisplay();
      document.title = "Daylog"
    });

    // 初期表示
    activateMode(Mode.WORK);
  });
</script>
